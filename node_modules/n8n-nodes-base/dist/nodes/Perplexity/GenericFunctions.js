"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var GenericFunctions_exports = {};
__export(GenericFunctions_exports, {
  sendErrorPostReceive: () => sendErrorPostReceive
});
module.exports = __toCommonJS(GenericFunctions_exports);
var import_n8n_workflow = require("n8n-workflow");
async function sendErrorPostReceive(data, response) {
  if (String(response.statusCode).startsWith("4") || String(response.statusCode).startsWith("5")) {
    const errorBody = response.body;
    const error = errorBody?.error ?? {};
    const errorMessage = typeof error.message === "string" ? error.message : response.statusMessage ?? "An unexpected issue occurred";
    const errorType = typeof error.type === "string" ? error.type : "UnknownError";
    const itemIndex = typeof error.itemIndex === "number" ? `[Item ${error.itemIndex}]` : "";
    if (errorType === "invalid_model") {
      throw new import_n8n_workflow.NodeApiError(this.getNode(), errorBody, {
        message: "Invalid model",
        description: "The model is not valid. Permitted models can be found in the documentation at https://docs.perplexity.ai/guides/model-cards."
      });
    }
    throw new import_n8n_workflow.NodeApiError(this.getNode(), response, {
      message: `${errorMessage}${itemIndex ? " " + itemIndex : ""}.`,
      description: "Any optional system messages must be sent first, followed by alternating user and assistant messages. For more details, refer to the API documentation: https://docs.perplexity.ai/api-reference/chat-completions"
    });
  }
  return data;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  sendErrorPostReceive
});
//# sourceMappingURL=GenericFunctions.js.map