{"version":3,"sources":["../../../nodes/Code/Pyodide.ts"],"sourcesContent":["import { dirname } from 'node:path';\nimport { createContext, runInContext } from 'node:vm';\nimport type { PyodideInterface } from 'pyodide';\n\nlet pyodideInstance: PyodideInterface | undefined;\n\nexport async function LoadPyodide(packageCacheDir: string): Promise<PyodideInterface> {\n\tif (pyodideInstance === undefined) {\n\t\tconst { loadPyodide } = await import('pyodide');\n\t\tconst { XMLHttpRequest } = await import('xmlhttprequest-ssl');\n\t\tconst indexURL = dirname(require.resolve('pyodide'));\n\t\tconst context = createContext({\n\t\t\tloadPyodide,\n\t\t\tindexURL,\n\t\t\tpackageCacheDir,\n\t\t\tjsglobals: {\n\t\t\t\tconsole,\n\t\t\t\tfetch,\n\t\t\t\tAbortController,\n\t\t\t\tAbortSignal,\n\t\t\t\tObject,\n\t\t\t\tXMLHttpRequest,\n\t\t\t},\n\t\t});\n\t\tpyodideInstance = (await runInContext(\n\t\t\t'loadPyodide({ indexURL, packageCacheDir, jsglobals })',\n\t\t\tcontext,\n\t\t)) as PyodideInterface;\n\n\t\tawait pyodideInstance.runPythonAsync(`\nblocked_modules = [\"os\"]\n\nimport sys\nfor module_name in blocked_modules:\n\tdel sys.modules[module_name]\n\nfrom importlib.abc import MetaPathFinder\nfrom importlib.machinery import ModuleSpec\nfrom types import ModuleType\nfrom typing import Sequence, Optional\n\nclass ImportBlocker(MetaPathFinder):\n\tdef find_spec(\n\t\tself,\n\t\tfullname: str,\n\t\tpath: Sequence[bytes | str] | None,\n\t\ttarget: ModuleType | None = None,\n) -> Optional[ModuleSpec]:\n\t\tif fullname in blocked_modules:\n\t\t\t\traise ModuleNotFoundError(f\"Module {fullname!r} is blocked\", name=fullname)\n\t\treturn None\n\nsys.meta_path.insert(0, ImportBlocker())\n\nfrom _pyodide_core import jsproxy_typedict\nfrom js import Object\n`);\n\t}\n\n\treturn pyodideInstance;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAwB;AACxB,qBAA4C;AAG5C,IAAI;AAEJ,eAAsB,YAAY,iBAAoD;AACrF,MAAI,oBAAoB,QAAW;AAClC,UAAM,EAAE,YAAY,IAAI,MAAM,OAAO,SAAS;AAC9C,UAAM,EAAE,eAAe,IAAI,MAAM,OAAO,oBAAoB;AAC5D,UAAM,eAAW,0BAAQ,gBAAgB,SAAS,CAAC;AACnD,UAAM,cAAU,8BAAc;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,IACD,CAAC;AACD,sBAAmB,UAAM;AAAA,MACxB;AAAA,MACA;AAAA,IACD;AAEA,UAAM,gBAAgB,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA2BtC;AAAA,EACA;AAEA,SAAO;AACR;","names":[]}