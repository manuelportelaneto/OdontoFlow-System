"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Pyodide_exports = {};
__export(Pyodide_exports, {
  LoadPyodide: () => LoadPyodide
});
module.exports = __toCommonJS(Pyodide_exports);
var import_node_path = require("node:path");
var import_node_vm = require("node:vm");
let pyodideInstance;
async function LoadPyodide(packageCacheDir) {
  if (pyodideInstance === void 0) {
    const { loadPyodide } = await import("pyodide");
    const { XMLHttpRequest } = await import("xmlhttprequest-ssl");
    const indexURL = (0, import_node_path.dirname)(require.resolve("pyodide"));
    const context = (0, import_node_vm.createContext)({
      loadPyodide,
      indexURL,
      packageCacheDir,
      jsglobals: {
        console,
        fetch,
        AbortController,
        AbortSignal,
        Object,
        XMLHttpRequest
      }
    });
    pyodideInstance = await (0, import_node_vm.runInContext)(
      "loadPyodide({ indexURL, packageCacheDir, jsglobals })",
      context
    );
    await pyodideInstance.runPythonAsync(`
blocked_modules = ["os"]

import sys
for module_name in blocked_modules:
	del sys.modules[module_name]

from importlib.abc import MetaPathFinder
from importlib.machinery import ModuleSpec
from types import ModuleType
from typing import Sequence, Optional

class ImportBlocker(MetaPathFinder):
	def find_spec(
		self,
		fullname: str,
		path: Sequence[bytes | str] | None,
		target: ModuleType | None = None,
) -> Optional[ModuleSpec]:
		if fullname in blocked_modules:
				raise ModuleNotFoundError(f"Module {fullname!r} is blocked", name=fullname)
		return None

sys.meta_path.insert(0, ImportBlocker())

from _pyodide_core import jsproxy_typedict
from js import Object
`);
  }
  return pyodideInstance;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LoadPyodide
});
//# sourceMappingURL=Pyodide.js.map