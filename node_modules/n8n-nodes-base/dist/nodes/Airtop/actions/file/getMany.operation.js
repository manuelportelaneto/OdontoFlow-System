"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getMany_operation_exports = {};
__export(getMany_operation_exports, {
  description: () => description,
  execute: () => execute
});
module.exports = __toCommonJS(getMany_operation_exports);
var import_helpers = require("./helpers");
var import_utilities = require("../../../../utils/utilities");
var import_transport = require("../../transport");
const displayOptions = {
  show: {
    resource: ["file"],
    operation: ["getMany"]
  }
};
const description = [
  {
    displayName: "Return All",
    name: "returnAll",
    type: "boolean",
    default: false,
    description: "Whether to return all results or only up to a given limit",
    displayOptions
  },
  {
    displayName: "Limit",
    name: "limit",
    type: "number",
    displayOptions: {
      show: {
        resource: ["file"],
        operation: ["getMany"],
        returnAll: [false]
      }
    },
    typeOptions: {
      minValue: 1,
      maxValue: 100
    },
    default: 10,
    description: "Max number of results to return"
  },
  {
    displayName: "Session IDs",
    name: "sessionIds",
    type: "string",
    default: "",
    description: 'Comma-separated list of <a href="https://docs.airtop.ai/api-reference/airtop-api/sessions/create" target="_blank">Session IDs</a> to filter files by. When empty, all files from all sessions will be returned.',
    placeholder: "e.g. 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b, a13c6f73-bd89-4a76-ab32-5a6c422e8224",
    displayOptions
  },
  {
    displayName: "Output Files in Single Item",
    name: "outputSingleItem",
    type: "boolean",
    default: true,
    description: "Whether to output one item containing all files or output each file as a separate item",
    displayOptions
  }
];
async function execute(index) {
  const returnAll = this.getNodeParameter("returnAll", index, false);
  const limit = this.getNodeParameter("limit", index, 10);
  const sessionIds = this.getNodeParameter("sessionIds", index, "");
  const outputSingleItem = this.getNodeParameter("outputSingleItem", index, true);
  const endpoint = "/files";
  let files = [];
  const responseData = returnAll ? await import_helpers.requestAllFiles.call(this, sessionIds) : await import_transport.apiRequest.call(this, "GET", endpoint, {}, { sessionIds, limit });
  if (responseData.data?.files && Array.isArray(responseData.data?.files)) {
    files = responseData.data.files;
  }
  if (outputSingleItem) {
    return this.helpers.returnJsonArray({ ...responseData });
  }
  return (0, import_utilities.wrapData)(files);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  description,
  execute
});
//# sourceMappingURL=getMany.operation.js.map