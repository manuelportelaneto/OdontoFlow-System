"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var get_operation_exports = {};
__export(get_operation_exports, {
  description: () => description,
  execute: () => execute
});
module.exports = __toCommonJS(get_operation_exports);
var import_n8n_workflow = require("n8n-workflow");
var import_constants = require("../../constants");
var import_transport = require("../../transport");
const displayOptions = {
  show: {
    resource: ["file"],
    operation: ["get"]
  }
};
const description = [
  {
    displayName: "File ID",
    name: "fileId",
    type: "string",
    default: "",
    required: true,
    description: "ID of the file to retrieve",
    displayOptions
  },
  {
    displayName: "Output Binary File",
    name: "outputBinaryFile",
    type: "boolean",
    default: false,
    description: "Whether to output the file in binary format if the file is ready for download",
    displayOptions
  }
];
async function execute(index) {
  const fileId = this.getNodeParameter("fileId", index, "");
  const outputBinaryFile = this.getNodeParameter("outputBinaryFile", index, false);
  if (!fileId) {
    throw new import_n8n_workflow.NodeOperationError(
      this.getNode(),
      import_constants.ERROR_MESSAGES.REQUIRED_PARAMETER.replace("{{field}}", "File ID")
    );
  }
  const response = await import_transport.apiRequest.call(
    this,
    "GET",
    `/files/${fileId}`
  );
  const { fileName = "", downloadUrl = "", status = "" } = response?.data ?? {};
  if (outputBinaryFile && downloadUrl && status === "available") {
    const buffer = await this.helpers.httpRequest({
      url: downloadUrl,
      json: false,
      encoding: "arraybuffer"
    });
    const file = await this.helpers.prepareBinaryData(buffer, fileName);
    return [
      {
        json: {
          ...response
        },
        binary: { data: file }
      }
    ];
  }
  return this.helpers.returnJsonArray({ ...response });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  description,
  execute
});
//# sourceMappingURL=get.operation.js.map