"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var upload_operation_exports = {};
__export(upload_operation_exports, {
  description: () => description,
  execute: () => execute
});
module.exports = __toCommonJS(upload_operation_exports);
var import_n8n_workflow = require("n8n-workflow");
var import_helpers = require("./helpers");
var import_GenericFunctions = require("../../GenericFunctions");
var import_fields = require("../common/fields");
const displayOptions = {
  show: {
    resource: ["file"],
    operation: ["upload"]
  }
};
const description = [
  {
    ...import_fields.sessionIdField,
    description: "The session ID to load the file into",
    displayOptions
  },
  {
    ...import_fields.windowIdField,
    description: "The window ID to trigger the file input in",
    displayOptions
  },
  {
    displayName: "File Name",
    name: "fileName",
    type: "string",
    default: "",
    required: true,
    description: "Name for the file to upload. For a session, all files loaded should have <b>unique names</b>.",
    displayOptions
  },
  {
    displayName: "File Type",
    name: "fileType",
    type: "options",
    options: [
      {
        name: "Browser Download",
        value: "browser_download"
      },
      {
        name: "Screenshot",
        value: "screenshot"
      },
      {
        name: "Video",
        value: "video"
      },
      {
        name: "Customer Upload",
        value: "customer_upload"
      }
    ],
    default: "customer_upload",
    description: "Choose the type of file to upload. Defaults to 'Customer Upload'.",
    displayOptions
  },
  {
    displayName: "Source",
    name: "source",
    type: "options",
    options: [
      {
        name: "URL",
        value: "url"
      },
      {
        name: "Binary",
        value: "binary"
      }
    ],
    default: "url",
    description: "Source of the file to upload",
    displayOptions
  },
  {
    displayName: "Binary Property",
    name: "binaryPropertyName",
    type: "string",
    default: "data",
    required: true,
    displayOptions: {
      show: {
        source: ["binary"],
        ...displayOptions.show
      }
    },
    description: "Name of the binary property containing the file data"
  },
  {
    displayName: "URL",
    name: "url",
    type: "string",
    default: "",
    required: true,
    displayOptions: {
      show: {
        source: ["url"],
        ...displayOptions.show
      }
    },
    description: "URL from where to fetch the file to upload"
  },
  {
    displayName: "Trigger File Input",
    name: "triggerFileInputParameter",
    type: "boolean",
    default: true,
    description: "Whether to automatically trigger the file input dialog in the current window. If disabled, the file will only be uploaded to the session without opening the file input dialog.",
    displayOptions
  },
  {
    ...import_fields.elementDescriptionField,
    description: "Optional description of the file input to interact with",
    placeholder: "e.g. the file upload selection box",
    displayOptions: {
      show: {
        triggerFileInputParameter: [true],
        ...displayOptions.show
      }
    }
  }
];
async function execute(index) {
  const sessionId = import_GenericFunctions.validateRequiredStringField.call(this, index, "sessionId", "Session ID");
  const windowId = import_GenericFunctions.validateRequiredStringField.call(this, index, "windowId", "Window ID");
  const fileName = this.getNodeParameter("fileName", index, "");
  const fileType = this.getNodeParameter("fileType", index, "customer_upload");
  const source = this.getNodeParameter("source", index, "url");
  const url = this.getNodeParameter("url", index, "");
  const binaryPropertyName = this.getNodeParameter("binaryPropertyName", index, "");
  const triggerFileInputParameter = this.getNodeParameter(
    "triggerFileInputParameter",
    index,
    true
  );
  const elementDescription = this.getNodeParameter("elementDescription", index, "");
  const fileValue = source === "url" ? url : binaryPropertyName;
  try {
    const fileBuffer = await import_helpers.createFileBuffer.call(this, source, fileValue, index);
    const fileId = await import_helpers.createAndUploadFile.call(this, fileName, fileBuffer, fileType);
    await import_helpers.pushFileToSession.call(this, fileId, sessionId);
    if (triggerFileInputParameter) {
      await import_helpers.triggerFileInput.call(this, fileId, windowId, sessionId, elementDescription);
    }
    return this.helpers.returnJsonArray({
      sessionId,
      windowId,
      data: {
        fileId,
        message: "File uploaded successfully"
      }
    });
  } catch (error) {
    throw new import_n8n_workflow.NodeOperationError(this.getNode(), error);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  description,
  execute
});
//# sourceMappingURL=upload.operation.js.map