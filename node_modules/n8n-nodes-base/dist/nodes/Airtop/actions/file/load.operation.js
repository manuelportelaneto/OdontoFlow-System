"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var load_operation_exports = {};
__export(load_operation_exports, {
  description: () => description,
  execute: () => execute
});
module.exports = __toCommonJS(load_operation_exports);
var import_n8n_workflow = require("n8n-workflow");
var import_helpers = require("./helpers");
var import_fields = require("../common/fields");
const displayOptions = {
  show: {
    resource: ["file"],
    operation: ["load"]
  }
};
const description = [
  {
    ...import_fields.sessionIdField,
    description: "The session ID to load the file into",
    displayOptions
  },
  {
    ...import_fields.windowIdField,
    description: "The window ID to trigger the file input in",
    displayOptions
  },
  {
    displayName: "File ID",
    name: "fileId",
    type: "string",
    default: "",
    required: true,
    description: "ID of the file to load into the session",
    displayOptions
  },
  {
    ...import_fields.elementDescriptionField,
    description: "Optional description of the file input to interact with",
    placeholder: "e.g. the file upload selection box",
    displayOptions
  }
];
async function execute(index) {
  const fileId = this.getNodeParameter("fileId", index, "");
  const sessionId = this.getNodeParameter("sessionId", index, "");
  const windowId = this.getNodeParameter("windowId", index, "");
  const elementDescription = this.getNodeParameter("elementDescription", index, "");
  try {
    await import_helpers.pushFileToSession.call(this, fileId, sessionId);
    await import_helpers.triggerFileInput.call(this, fileId, windowId, sessionId, elementDescription);
    return this.helpers.returnJsonArray({
      sessionId,
      windowId,
      data: {
        message: "File loaded successfully"
      }
    });
  } catch (error) {
    throw new import_n8n_workflow.NodeOperationError(this.getNode(), error);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  description,
  execute
});
//# sourceMappingURL=load.operation.js.map