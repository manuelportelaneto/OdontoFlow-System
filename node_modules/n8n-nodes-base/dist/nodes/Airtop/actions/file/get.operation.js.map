{"version":3,"sources":["../../../../../nodes/Airtop/actions/file/get.operation.ts"],"sourcesContent":["import { NodeOperationError } from 'n8n-workflow';\nimport type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\n\nimport { ERROR_MESSAGES } from '../../constants';\nimport { apiRequest } from '../../transport';\nimport type { IAirtopResponseWithFiles } from '../../transport/types';\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['file'],\n\t\toperation: ['get'],\n\t},\n};\n\nexport const description: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'File ID',\n\t\tname: 'fileId',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tdescription: 'ID of the file to retrieve',\n\t\tdisplayOptions,\n\t},\n\t{\n\t\tdisplayName: 'Output Binary File',\n\t\tname: 'outputBinaryFile',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription: 'Whether to output the file in binary format if the file is ready for download',\n\t\tdisplayOptions,\n\t},\n];\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\tconst fileId = this.getNodeParameter('fileId', index, '') as string;\n\tconst outputBinaryFile = this.getNodeParameter('outputBinaryFile', index, false);\n\n\tif (!fileId) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\tERROR_MESSAGES.REQUIRED_PARAMETER.replace('{{field}}', 'File ID'),\n\t\t);\n\t}\n\n\tconst response = (await apiRequest.call(\n\t\tthis,\n\t\t'GET',\n\t\t`/files/${fileId}`,\n\t)) as IAirtopResponseWithFiles;\n\n\tconst { fileName = '', downloadUrl = '', status = '' } = response?.data ?? {};\n\n\t// Handle binary file output\n\tif (outputBinaryFile && downloadUrl && status === 'available') {\n\t\tconst buffer = (await this.helpers.httpRequest({\n\t\t\turl: downloadUrl,\n\t\t\tjson: false,\n\t\t\tencoding: 'arraybuffer',\n\t\t})) as Buffer;\n\t\tconst file = await this.helpers.prepareBinaryData(buffer, fileName);\n\t\treturn [\n\t\t\t{\n\t\t\t\tjson: {\n\t\t\t\t\t...response,\n\t\t\t\t},\n\t\t\t\tbinary: { data: file },\n\t\t\t},\n\t\t];\n\t}\n\n\treturn this.helpers.returnJsonArray({ ...response });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmC;AAGnC,uBAA+B;AAC/B,uBAA2B;AAG3B,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,UAAU,CAAC,MAAM;AAAA,IACjB,WAAW,CAAC,KAAK;AAAA,EAClB;AACD;AAEO,MAAM,cAAiC;AAAA,EAC7C;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,UAAU;AAAA,IACV,aAAa;AAAA,IACb;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,IACb;AAAA,EACD;AACD;AAEA,eAAsB,QAErB,OACgC;AAChC,QAAM,SAAS,KAAK,iBAAiB,UAAU,OAAO,EAAE;AACxD,QAAM,mBAAmB,KAAK,iBAAiB,oBAAoB,OAAO,KAAK;AAE/E,MAAI,CAAC,QAAQ;AACZ,UAAM,IAAI;AAAA,MACT,KAAK,QAAQ;AAAA,MACb,gCAAe,mBAAmB,QAAQ,aAAa,SAAS;AAAA,IACjE;AAAA,EACD;AAEA,QAAM,WAAY,MAAM,4BAAW;AAAA,IAClC;AAAA,IACA;AAAA,IACA,UAAU,MAAM;AAAA,EACjB;AAEA,QAAM,EAAE,WAAW,IAAI,cAAc,IAAI,SAAS,GAAG,IAAI,UAAU,QAAQ,CAAC;AAG5E,MAAI,oBAAoB,eAAe,WAAW,aAAa;AAC9D,UAAM,SAAU,MAAM,KAAK,QAAQ,YAAY;AAAA,MAC9C,KAAK;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACX,CAAC;AACD,UAAM,OAAO,MAAM,KAAK,QAAQ,kBAAkB,QAAQ,QAAQ;AAClE,WAAO;AAAA,MACN;AAAA,QACC,MAAM;AAAA,UACL,GAAG;AAAA,QACJ;AAAA,QACA,QAAQ,EAAE,MAAM,KAAK;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AAEA,SAAO,KAAK,QAAQ,gBAAgB,EAAE,GAAG,SAAS,CAAC;AACpD;","names":[]}