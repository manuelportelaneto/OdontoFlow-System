{"version":3,"sources":["../../../../../nodes/Airtop/actions/file/upload.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport {\n\tcreateAndUploadFile,\n\tpushFileToSession,\n\ttriggerFileInput,\n\tcreateFileBuffer,\n} from './helpers';\nimport { validateRequiredStringField } from '../../GenericFunctions';\nimport { sessionIdField, windowIdField, elementDescriptionField } from '../common/fields';\n\nconst displayOptions = {\n\tshow: {\n\t\tresource: ['file'],\n\t\toperation: ['upload'],\n\t},\n};\n\nexport const description: INodeProperties[] = [\n\t{\n\t\t...sessionIdField,\n\t\tdescription: 'The session ID to load the file into',\n\t\tdisplayOptions,\n\t},\n\t{\n\t\t...windowIdField,\n\t\tdescription: 'The window ID to trigger the file input in',\n\t\tdisplayOptions,\n\t},\n\t{\n\t\tdisplayName: 'File Name',\n\t\tname: 'fileName',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tdescription:\n\t\t\t'Name for the file to upload. For a session, all files loaded should have <b>unique names</b>.',\n\t\tdisplayOptions,\n\t},\n\t{\n\t\tdisplayName: 'File Type',\n\t\tname: 'fileType',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Browser Download',\n\t\t\t\tvalue: 'browser_download',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Screenshot',\n\t\t\t\tvalue: 'screenshot',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Video',\n\t\t\t\tvalue: 'video',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Customer Upload',\n\t\t\t\tvalue: 'customer_upload',\n\t\t\t},\n\t\t],\n\t\tdefault: 'customer_upload',\n\t\tdescription: \"Choose the type of file to upload. Defaults to 'Customer Upload'.\",\n\t\tdisplayOptions,\n\t},\n\t{\n\t\tdisplayName: 'Source',\n\t\tname: 'source',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'URL',\n\t\t\t\tvalue: 'url',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Binary',\n\t\t\t\tvalue: 'binary',\n\t\t\t},\n\t\t],\n\t\tdefault: 'url',\n\t\tdescription: 'Source of the file to upload',\n\t\tdisplayOptions,\n\t},\n\t{\n\t\tdisplayName: 'Binary Property',\n\t\tname: 'binaryPropertyName',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tsource: ['binary'],\n\t\t\t\t...displayOptions.show,\n\t\t\t},\n\t\t},\n\t\tdescription: 'Name of the binary property containing the file data',\n\t},\n\t{\n\t\tdisplayName: 'URL',\n\t\tname: 'url',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\trequired: true,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tsource: ['url'],\n\t\t\t\t...displayOptions.show,\n\t\t\t},\n\t\t},\n\t\tdescription: 'URL from where to fetch the file to upload',\n\t},\n\t{\n\t\tdisplayName: 'Trigger File Input',\n\t\tname: 'triggerFileInputParameter',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tdescription:\n\t\t\t'Whether to automatically trigger the file input dialog in the current window. If disabled, the file will only be uploaded to the session without opening the file input dialog.',\n\t\tdisplayOptions,\n\t},\n\t{\n\t\t...elementDescriptionField,\n\t\tdescription: 'Optional description of the file input to interact with',\n\t\tplaceholder: 'e.g. the file upload selection box',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\ttriggerFileInputParameter: [true],\n\t\t\t\t...displayOptions.show,\n\t\t\t},\n\t\t},\n\t},\n];\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\tconst sessionId = validateRequiredStringField.call(this, index, 'sessionId', 'Session ID');\n\tconst windowId = validateRequiredStringField.call(this, index, 'windowId', 'Window ID');\n\tconst fileName = this.getNodeParameter('fileName', index, '') as string;\n\tconst fileType = this.getNodeParameter('fileType', index, 'customer_upload') as string;\n\tconst source = this.getNodeParameter('source', index, 'url') as string;\n\tconst url = this.getNodeParameter('url', index, '') as string;\n\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', index, '');\n\tconst triggerFileInputParameter = this.getNodeParameter(\n\t\t'triggerFileInputParameter',\n\t\tindex,\n\t\ttrue,\n\t) as boolean;\n\tconst elementDescription = this.getNodeParameter('elementDescription', index, '') as string;\n\n\t// Get the file content based on source type\n\tconst fileValue = source === 'url' ? url : binaryPropertyName;\n\n\ttry {\n\t\tconst fileBuffer = await createFileBuffer.call(this, source, fileValue, index);\n\t\tconst fileId = await createAndUploadFile.call(this, fileName, fileBuffer, fileType);\n\t\t// Push file to session\n\t\tawait pushFileToSession.call(this, fileId, sessionId);\n\n\t\tif (triggerFileInputParameter) {\n\t\t\tawait triggerFileInput.call(this, fileId, windowId, sessionId, elementDescription);\n\t\t}\n\n\t\treturn this.helpers.returnJsonArray({\n\t\t\tsessionId,\n\t\t\twindowId,\n\t\t\tdata: {\n\t\t\t\tfileId,\n\t\t\t\tmessage: 'File uploaded successfully',\n\t\t\t},\n\t\t});\n\t} catch (error) {\n\t\tthrow new NodeOperationError(this.getNode(), error as Error);\n\t}\n}\n"],"mappings":"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","names":[]}