{"version":3,"sources":["../../../../../nodes/Airtop/actions/window/takeScreenshot.operation.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tIBinaryData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport {\n\tvalidateSessionAndWindowId,\n\tvalidateAirtopApiResponse,\n\tconvertScreenshotToBinary,\n} from '../../GenericFunctions';\nimport { apiRequest } from '../../transport';\n\nexport const description: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Output Binary Image',\n\t\tdescription: 'Whether to output the image as a binary file instead of a base64 encoded string',\n\t\tname: 'outputImageAsBinary',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['window'],\n\t\t\t\toperation: ['takeScreenshot'],\n\t\t\t},\n\t\t},\n\t},\n];\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tindex: number,\n): Promise<INodeExecutionData[]> {\n\tconst { sessionId, windowId } = validateSessionAndWindowId.call(this, index);\n\tconst outputImageAsBinary = this.getNodeParameter('outputImageAsBinary', index, false) as boolean;\n\n\tlet data: IBinaryData | undefined; // for storing the binary data\n\tlet image = ''; // for storing the base64 encoded image\n\n\tconst response = await apiRequest.call(\n\t\tthis,\n\t\t'POST',\n\t\t`/sessions/${sessionId}/windows/${windowId}/screenshot`,\n\t);\n\n\t// validate response\n\tvalidateAirtopApiResponse(this.getNode(), response);\n\n\t// process screenshot on success\n\tif (response.meta?.screenshots?.length) {\n\t\tif (outputImageAsBinary) {\n\t\t\tconst buffer = convertScreenshotToBinary(response.meta.screenshots[0]);\n\t\t\tdata = await this.helpers.prepareBinaryData(buffer, 'screenshot.jpg', 'image/jpeg');\n\t\t} else {\n\t\t\timage = response?.meta?.screenshots?.[0].dataUrl;\n\t\t}\n\t}\n\n\treturn [\n\t\t{\n\t\t\tjson: {\n\t\t\t\tsessionId,\n\t\t\t\twindowId,\n\t\t\t\timage,\n\t\t\t},\n\t\t\t...(data ? { binary: { data } } : {}),\n\t\t},\n\t];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,8BAIO;AACP,uBAA2B;AAEpB,MAAM,cAAiC;AAAA,EAC7C;AAAA,IACC,aAAa;AAAA,IACb,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,QAAQ;AAAA,QACnB,WAAW,CAAC,gBAAgB;AAAA,MAC7B;AAAA,IACD;AAAA,EACD;AACD;AAEA,eAAsB,QAErB,OACgC;AAChC,QAAM,EAAE,WAAW,SAAS,IAAI,mDAA2B,KAAK,MAAM,KAAK;AAC3E,QAAM,sBAAsB,KAAK,iBAAiB,uBAAuB,OAAO,KAAK;AAErF,MAAI;AACJ,MAAI,QAAQ;AAEZ,QAAM,WAAW,MAAM,4BAAW;AAAA,IACjC;AAAA,IACA;AAAA,IACA,aAAa,SAAS,YAAY,QAAQ;AAAA,EAC3C;AAGA,yDAA0B,KAAK,QAAQ,GAAG,QAAQ;AAGlD,MAAI,SAAS,MAAM,aAAa,QAAQ;AACvC,QAAI,qBAAqB;AACxB,YAAM,aAAS,mDAA0B,SAAS,KAAK,YAAY,CAAC,CAAC;AACrE,aAAO,MAAM,KAAK,QAAQ,kBAAkB,QAAQ,kBAAkB,YAAY;AAAA,IACnF,OAAO;AACN,cAAQ,UAAU,MAAM,cAAc,CAAC,EAAE;AAAA,IAC1C;AAAA,EACD;AAEA,SAAO;AAAA,IACN;AAAA,MACC,MAAM;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,MACA,GAAI,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC;AAAA,IACpC;AAAA,EACD;AACD;","names":[]}