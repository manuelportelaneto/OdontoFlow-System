"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var output_utils_exports = {};
__export(output_utils_exports, {
  cleanOutputForToolUse: () => cleanOutputForToolUse,
  parseJsonIfPresent: () => parseJsonIfPresent
});
module.exports = __toCommonJS(output_utils_exports);
var import_n8n_workflow = require("n8n-workflow");
function parseJsonIfPresent(index, response) {
  const parseJsonOutput = this.getNodeParameter("additionalFields.parseJsonOutput", index, false);
  const outputJsonSchema = this.getNodeParameter(
    "additionalFields.outputSchema",
    index,
    ""
  );
  if (!parseJsonOutput || !outputJsonSchema.startsWith("{")) {
    return response;
  }
  try {
    const output = JSON.parse(response.data?.modelResponse ?? "");
    return {
      sessionId: response.sessionId,
      windowId: response.windowId,
      output
    };
  } catch (error) {
    throw new import_n8n_workflow.NodeOperationError(this.getNode(), "Output is not a valid JSON");
  }
}
function cleanOutputForToolUse(output) {
  const getOutput = (executionData) => {
    if (executionData.json?.errors?.length) {
      const errorMessage = executionData.json?.errors[0].message;
      return {
        output: `Error: ${errorMessage}`
      };
    }
    if (executionData.json?.output) {
      return executionData.json?.output;
    }
    if (executionData.json?.data?.modelResponse) {
      return {
        output: executionData.json?.data?.modelResponse
      };
    }
    return {
      output: { ...executionData.json?.data ?? {} }
    };
  };
  return output.map((executionData) => ({
    ...executionData,
    json: {
      ...getOutput(executionData)
    }
  }));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cleanOutputForToolUse,
  parseJsonIfPresent
});
//# sourceMappingURL=output.utils.js.map