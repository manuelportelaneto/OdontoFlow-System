{"version":3,"sources":["../../../../../nodes/Airtop/actions/common/output.utils.ts"],"sourcesContent":["import { NodeOperationError } from 'n8n-workflow';\nimport type { IExecuteFunctions, IDataObject } from 'n8n-workflow';\n\nimport type { IAirtopNodeExecutionData, IAirtopResponse } from '../../transport/types';\n\n/**\n * Parse JSON when the 'Parse JSON Output' parameter is enabled\n * @param this - The execution context\n * @param index - The index of the node\n * @param response - The Airtop API response to parse\n * @returns The parsed output\n */\nexport function parseJsonIfPresent(\n\tthis: IExecuteFunctions,\n\tindex: number,\n\tresponse: IAirtopResponse,\n): IAirtopResponse {\n\tconst parseJsonOutput = this.getNodeParameter('additionalFields.parseJsonOutput', index, false);\n\tconst outputJsonSchema = this.getNodeParameter(\n\t\t'additionalFields.outputSchema',\n\t\tindex,\n\t\t'',\n\t) as string;\n\n\tif (!parseJsonOutput || !outputJsonSchema.startsWith('{')) {\n\t\treturn response;\n\t}\n\n\ttry {\n\t\tconst output = JSON.parse(response.data?.modelResponse ?? '') as IDataObject;\n\t\treturn {\n\t\t\tsessionId: response.sessionId,\n\t\t\twindowId: response.windowId,\n\t\t\toutput,\n\t\t};\n\t} catch (error) {\n\t\tthrow new NodeOperationError(this.getNode(), 'Output is not a valid JSON');\n\t}\n}\n\n/**\n * Clean up the output when used as a tool\n * @param output - The output to clean up\n * @returns The cleaned up output\n */\nexport function cleanOutputForToolUse(output: IAirtopNodeExecutionData[]) {\n\tconst getOutput = (executionData: IAirtopNodeExecutionData) => {\n\t\t// Return error message\n\t\tif (executionData.json?.errors?.length) {\n\t\t\tconst errorMessage = executionData.json?.errors[0].message as string;\n\t\t\treturn {\n\t\t\t\toutput: `Error: ${errorMessage}`,\n\t\t\t};\n\t\t}\n\n\t\t// Return output parsed from JSON\n\t\tif (executionData.json?.output) {\n\t\t\treturn executionData.json?.output;\n\t\t}\n\n\t\t// Return model response\n\t\tif (executionData.json?.data?.modelResponse) {\n\t\t\treturn {\n\t\t\t\toutput: executionData.json?.data?.modelResponse,\n\t\t\t};\n\t\t}\n\n\t\t// Return everything else\n\t\treturn {\n\t\t\toutput: { ...(executionData.json?.data ?? {}) },\n\t\t};\n\t};\n\n\treturn output.map((executionData) => ({\n\t\t...executionData,\n\t\tjson: {\n\t\t\t...getOutput(executionData),\n\t\t},\n\t}));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmC;AAY5B,SAAS,mBAEf,OACA,UACkB;AAClB,QAAM,kBAAkB,KAAK,iBAAiB,oCAAoC,OAAO,KAAK;AAC9F,QAAM,mBAAmB,KAAK;AAAA,IAC7B;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAEA,MAAI,CAAC,mBAAmB,CAAC,iBAAiB,WAAW,GAAG,GAAG;AAC1D,WAAO;AAAA,EACR;AAEA,MAAI;AACH,UAAM,SAAS,KAAK,MAAM,SAAS,MAAM,iBAAiB,EAAE;AAC5D,WAAO;AAAA,MACN,WAAW,SAAS;AAAA,MACpB,UAAU,SAAS;AAAA,MACnB;AAAA,IACD;AAAA,EACD,SAAS,OAAO;AACf,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,4BAA4B;AAAA,EAC1E;AACD;AAOO,SAAS,sBAAsB,QAAoC;AACzE,QAAM,YAAY,CAAC,kBAA4C;AAE9D,QAAI,cAAc,MAAM,QAAQ,QAAQ;AACvC,YAAM,eAAe,cAAc,MAAM,OAAO,CAAC,EAAE;AACnD,aAAO;AAAA,QACN,QAAQ,UAAU,YAAY;AAAA,MAC/B;AAAA,IACD;AAGA,QAAI,cAAc,MAAM,QAAQ;AAC/B,aAAO,cAAc,MAAM;AAAA,IAC5B;AAGA,QAAI,cAAc,MAAM,MAAM,eAAe;AAC5C,aAAO;AAAA,QACN,QAAQ,cAAc,MAAM,MAAM;AAAA,MACnC;AAAA,IACD;AAGA,WAAO;AAAA,MACN,QAAQ,EAAE,GAAI,cAAc,MAAM,QAAQ,CAAC,EAAG;AAAA,IAC/C;AAAA,EACD;AAEA,SAAO,OAAO,IAAI,CAAC,mBAAmB;AAAA,IACrC,GAAG;AAAA,IACH,MAAM;AAAA,MACL,GAAG,UAAU,aAAa;AAAA,IAC3B;AAAA,EACD,EAAE;AACH;","names":[]}