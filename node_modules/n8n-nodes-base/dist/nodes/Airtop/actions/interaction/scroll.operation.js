"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var scroll_operation_exports = {};
__export(scroll_operation_exports, {
  description: () => description,
  execute: () => execute
});
module.exports = __toCommonJS(scroll_operation_exports);
var import_helpers = require("./helpers");
var import_GenericFunctions = require("../../GenericFunctions");
var import_transport = require("../../transport");
const description = [
  {
    displayName: "Scroll Mode",
    name: "scrollingMode",
    type: "options",
    description: "Choose the mode of scrolling",
    options: [
      {
        name: "Automatic",
        value: "automatic",
        description: "Describe with natural language the element to scroll to"
      },
      {
        name: "Manual",
        value: "manual",
        description: "Define the direction and amount to scroll by"
      }
    ],
    default: "automatic",
    required: true,
    displayOptions: {
      show: {
        resource: ["interaction"],
        operation: ["scroll"]
      }
    }
  },
  {
    displayName: "Element Description",
    default: "",
    description: "A natural language description of the element to scroll to",
    name: "scrollToElement",
    type: "string",
    placeholder: 'e.g. the page section titled "Contact Us"',
    required: true,
    displayOptions: {
      show: {
        resource: ["interaction"],
        operation: ["scroll"],
        scrollingMode: ["automatic"]
      }
    }
  },
  {
    displayName: "Scroll To Page Edges",
    name: "scrollToEdge",
    type: "fixedCollection",
    default: {},
    placeholder: "Add Edge Direction",
    description: "The direction to scroll to. When 'Scroll By' is defined, 'Scroll To Edge' action will be executed first, then 'Scroll By' action.",
    displayOptions: {
      show: {
        resource: ["interaction"],
        operation: ["scroll"],
        scrollingMode: ["manual"]
      }
    },
    options: [
      {
        displayName: "Page Edges",
        name: "edgeValues",
        values: [
          {
            displayName: "Vertically",
            name: "yAxis",
            type: "options",
            default: "",
            options: [
              {
                name: "Empty",
                value: ""
              },
              {
                name: "Top",
                value: "top"
              },
              {
                name: "Bottom",
                value: "bottom"
              }
            ]
          },
          {
            displayName: "Horizontally",
            name: "xAxis",
            type: "options",
            default: "",
            options: [
              {
                name: "Empty",
                value: ""
              },
              {
                name: "Left",
                value: "left"
              },
              {
                name: "Right",
                value: "right"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    displayName: "Scroll By",
    name: "scrollBy",
    type: "fixedCollection",
    default: {},
    description: "The amount to scroll by. When 'Scroll To Edge' is defined, 'Scroll By' action will be executed after 'Scroll To Edge'.",
    placeholder: "Add Scroll Amount",
    displayOptions: {
      show: {
        resource: ["interaction"],
        operation: ["scroll"],
        scrollingMode: ["manual"]
      }
    },
    options: [
      {
        name: "scrollValues",
        displayName: "Scroll Values",
        description: "The amount in pixels or percentage to scroll by",
        values: [
          {
            displayName: "Vertically",
            name: "yAxis",
            type: "string",
            default: "",
            placeholder: "e.g. 200px, 50%, -100px"
          },
          {
            displayName: "Horizontally",
            name: "xAxis",
            type: "string",
            default: "",
            placeholder: "e.g. 50px, 10%, -200px"
          }
        ]
      }
    ]
  },
  {
    displayName: "Scrollable Area",
    name: "scrollWithin",
    type: "string",
    default: "",
    description: "Scroll within an element on the page",
    placeholder: "e.g. the left sidebar",
    displayOptions: {
      show: {
        resource: ["interaction"],
        operation: ["scroll"],
        scrollingMode: ["automatic"]
      }
    }
  }
];
async function execute(index) {
  const { sessionId, windowId } = import_GenericFunctions.validateSessionAndWindowId.call(this, index);
  const scrollingMode = import_GenericFunctions.validateScrollingMode.call(this, index);
  const isAutomatic = scrollingMode === "automatic";
  const scrollToElement = isAutomatic ? import_GenericFunctions.validateRequiredStringField.call(this, index, "scrollToElement", "Element Description") : "";
  const scrollToEdge = this.getNodeParameter("scrollToEdge.edgeValues", index, {});
  const scrollBy = import_GenericFunctions.validateScrollByAmount.call(this, index, "scrollBy.scrollValues");
  const scrollWithin = this.getNodeParameter("scrollWithin", index, "");
  const request = {
    // when scrollingMode is 'Manual'
    ...!isAutomatic ? { scrollToEdge } : {},
    ...!isAutomatic ? { scrollBy } : {},
    // when scrollingMode is 'Automatic'
    ...isAutomatic ? { scrollToElement } : {},
    ...isAutomatic ? { scrollWithin } : {}
  };
  const fullRequest = import_helpers.constructInteractionRequest.call(this, index, request);
  const response = await import_transport.apiRequest.call(
    this,
    "POST",
    `/sessions/${sessionId}/windows/${windowId}/scroll`,
    fullRequest
  );
  (0, import_GenericFunctions.validateAirtopApiResponse)(this.getNode(), response);
  return this.helpers.returnJsonArray({ sessionId, windowId, ...response });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  description,
  execute
});
//# sourceMappingURL=scroll.operation.js.map