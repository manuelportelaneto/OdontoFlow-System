"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var fill_operation_exports = {};
__export(fill_operation_exports, {
  description: () => description,
  execute: () => execute
});
module.exports = __toCommonJS(fill_operation_exports);
var import_n8n_workflow = require("n8n-workflow");
var import_constants = require("../../constants");
var import_GenericFunctions = require("../../GenericFunctions");
var import_transport = require("../../transport");
const description = [
  {
    displayName: "Form Data",
    name: "formData",
    type: "string",
    typeOptions: {
      rows: 4
    },
    required: true,
    default: "",
    displayOptions: {
      show: {
        resource: ["interaction"],
        operation: ["fill"]
      }
    },
    description: "The information to fill into the form written in natural language",
    placeholder: 'e.g. "Name: John Doe, Email: john.doe@example.com"'
  }
];
async function execute(index, timeout = import_constants.OPERATION_TIMEOUT) {
  const { sessionId, windowId } = import_GenericFunctions.validateSessionAndWindowId.call(this, index);
  const formData = import_GenericFunctions.validateRequiredStringField.call(this, index, "formData", "Form Data");
  const asyncAutomationResponse = await import_transport.apiRequest.call(
    this,
    "POST",
    `/async/sessions/${sessionId}/windows/${windowId}/execute-automation`,
    {
      automationId: "auto",
      parameters: {
        customData: formData
      }
    }
  );
  const reqId = asyncAutomationResponse.requestId;
  const startTime = Date.now();
  let automationStatusResponse;
  while (true) {
    automationStatusResponse = await import_transport.apiRequest.call(this, "GET", `/requests/${reqId}/status`);
    const status = automationStatusResponse?.status ?? "";
    (0, import_GenericFunctions.validateAirtopApiResponse)(this.getNode(), automationStatusResponse);
    if (status === "completed" || status === "error") {
      break;
    }
    const elapsedTime = Date.now() - startTime;
    if (elapsedTime >= timeout) {
      throw new import_n8n_workflow.NodeApiError(this.getNode(), {
        message: import_constants.ERROR_MESSAGES.TIMEOUT_REACHED,
        code: 500
      });
    }
    await new Promise((resolve) => setTimeout(resolve, 1e3));
  }
  return this.helpers.returnJsonArray({ sessionId, windowId, ...automationStatusResponse });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  description,
  execute
});
//# sourceMappingURL=fill.operation.js.map