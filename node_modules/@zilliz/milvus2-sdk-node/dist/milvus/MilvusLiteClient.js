"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MilvusLiteClient = void 0;
/* istanbul ignore file */
const MilvusClient_1 = require("./MilvusClient");
const const_1 = require("./const");
const MilvusLiteServer_1 = require("./lite/MilvusLiteServer");
function MilvusLiteClient(options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { address, logLevel } = options;
        const { uri, stopServer } = yield (0, MilvusLiteServer_1.startMilvusLiteServer)({
            dataPath: address,
            logLevel,
        });
        if (!uri) {
            throw new Error('Failed to get URI from Milvus Lite server');
        }
        const client = new MilvusClient_1.MilvusClient({
            address: uri,
            logLevel,
        });
        client.closeConnection = () => __awaiter(this, void 0, void 0, function* () {
            // Close the server process
            yield stopServer();
            return const_1.CONNECT_STATUS.SHUTDOWN;
        });
        return client;
    });
}
exports.MilvusLiteClient = MilvusLiteClient;
//# sourceMappingURL=MilvusLiteClient.js.map