"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var AgentV2_node_exports = {};
__export(AgentV2_node_exports, {
  AgentV2: () => AgentV2
});
module.exports = __toCommonJS(AgentV2_node_exports);
var import_n8n_workflow = require("n8n-workflow");
var import_descriptions = require("../../../../utils/descriptions");
var import_description = require("../agents/ToolsAgent/V2/description");
var import_execute = require("../agents/ToolsAgent/V2/execute");
function getInputs(hasOutputParser) {
  const getInputData = (inputs) => {
    const displayNames = {
      ai_languageModel: "Model",
      ai_memory: "Memory",
      ai_tool: "Tool",
      ai_outputParser: "Output Parser"
    };
    return inputs.map(({ type, filter }) => {
      const isModelType = type === "ai_languageModel";
      let displayName = type in displayNames ? displayNames[type] : void 0;
      if (isModelType) {
        displayName = "Chat Model";
      }
      const input = {
        type,
        displayName,
        required: isModelType,
        maxConnections: ["ai_languageModel", "ai_memory", "ai_outputParser"].includes(
          type
        ) ? 1 : void 0
      };
      if (filter) {
        input.filter = filter;
      }
      return input;
    });
  };
  let specialInputs = [
    {
      type: "ai_languageModel",
      filter: {
        nodes: [
          "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
          "@n8n/n8n-nodes-langchain.lmChatAwsBedrock",
          "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
          "@n8n/n8n-nodes-langchain.lmChatOllama",
          "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "@n8n/n8n-nodes-langchain.lmChatGroq",
          "@n8n/n8n-nodes-langchain.lmChatGoogleVertex",
          "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
          "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
          "@n8n/n8n-nodes-langchain.lmChatXAiGrok",
          "@n8n/n8n-nodes-langchain.code"
        ]
      }
    },
    {
      type: "ai_memory"
    },
    {
      type: "ai_tool",
      required: true
    },
    {
      type: "ai_outputParser"
    }
  ];
  if (hasOutputParser === false) {
    specialInputs = specialInputs.filter((input) => input.type !== "ai_outputParser");
  }
  return ["main", ...getInputData(specialInputs)];
}
class AgentV2 {
  constructor(baseDescription) {
    this.description = {
      ...baseDescription,
      version: 2,
      defaults: {
        name: "AI Agent",
        color: "#404040"
      },
      inputs: `={{
				((hasOutputParser) => {
					${getInputs.toString()};
					return getInputs(hasOutputParser)
				})($parameter.hasOutputParser === undefined || $parameter.hasOutputParser === true)
			}}`,
      outputs: [import_n8n_workflow.NodeConnectionTypes.Main],
      properties: [
        {
          displayName: 'Tip: Get a feel for agents with our quick <a href="https://docs.n8n.io/advanced-ai/intro-tutorial/" target="_blank">tutorial</a> or see an <a href="/templates/1954" target="_blank">example</a> of how this node works',
          name: "notice_tip",
          type: "notice",
          default: ""
        },
        import_descriptions.promptTypeOptions,
        {
          ...import_descriptions.textFromPreviousNode,
          displayOptions: {
            show: {
              promptType: ["auto"]
            }
          }
        },
        {
          ...import_descriptions.textInput,
          displayOptions: {
            show: {
              promptType: ["define"]
            }
          }
        },
        {
          displayName: "Require Specific Output Format",
          name: "hasOutputParser",
          type: "boolean",
          default: false,
          noDataExpression: true
        },
        {
          displayName: `Connect an <a data-action='openSelectiveNodeCreator' data-action-parameter-connectiontype='${import_n8n_workflow.NodeConnectionTypes.AiOutputParser}'>output parser</a> on the canvas to specify the output format you require`,
          name: "notice",
          type: "notice",
          default: "",
          displayOptions: {
            show: {
              hasOutputParser: [true]
            }
          }
        },
        ...import_description.toolsAgentProperties
      ]
    };
  }
  async execute() {
    return await import_execute.toolsAgentExecute.call(this);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AgentV2
});
//# sourceMappingURL=AgentV2.node.js.map