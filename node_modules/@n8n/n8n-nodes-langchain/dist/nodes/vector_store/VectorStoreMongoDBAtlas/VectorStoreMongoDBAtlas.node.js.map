{"version":3,"sources":["../../../../nodes/vector_store/VectorStoreMongoDBAtlas/VectorStoreMongoDBAtlas.node.ts"],"sourcesContent":["import { MongoDBAtlasVectorSearch } from '@langchain/mongodb';\nimport { MongoClient } from 'mongodb';\nimport { type ILoadOptionsFunctions, NodeOperationError, type INodeProperties } from 'n8n-workflow';\n\nimport { metadataFilterField } from '@utils/sharedFields';\n\nimport { createVectorStoreNode } from '../shared/createVectorStoreNode/createVectorStoreNode';\n\nconst mongoCollectionRLC: INodeProperties = {\n\tdisplayName: 'MongoDB Collection',\n\tname: 'mongoCollection',\n\ttype: 'resourceLocator',\n\tdefault: { mode: 'list', value: '' },\n\trequired: true,\n\tmodes: [\n\t\t{\n\t\t\tdisplayName: 'From List',\n\t\t\tname: 'list',\n\t\t\ttype: 'list',\n\t\t\ttypeOptions: {\n\t\t\t\tsearchListMethod: 'mongoCollectionSearch', // Method to fetch collections\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Name',\n\t\t\tname: 'name',\n\t\t\ttype: 'string',\n\t\t\tplaceholder: 'e.g. my_collection',\n\t\t},\n\t],\n};\n\nconst vectorIndexName: INodeProperties = {\n\tdisplayName: 'Vector Index Name',\n\tname: 'vectorIndexName',\n\ttype: 'string',\n\tdefault: '',\n\tdescription: 'The name of the vector index',\n\trequired: true,\n};\n\nconst embeddingField: INodeProperties = {\n\tdisplayName: 'Embedding',\n\tname: 'embedding',\n\ttype: 'string',\n\tdefault: 'embedding',\n\tdescription: 'The field with the embedding array',\n\trequired: true,\n};\n\nconst metadataField: INodeProperties = {\n\tdisplayName: 'Metadata Field',\n\tname: 'metadata_field',\n\ttype: 'string',\n\tdefault: 'text',\n\tdescription: 'The text field of the raw data',\n\trequired: true,\n};\n\nconst sharedFields: INodeProperties[] = [\n\tmongoCollectionRLC,\n\tembeddingField,\n\tmetadataField,\n\tvectorIndexName,\n];\n\nconst mongoNamespaceField: INodeProperties = {\n\tdisplayName: 'Namespace',\n\tname: 'namespace',\n\ttype: 'string',\n\tdescription: 'Logical partition for documents. Uses metadata.namespace field for filtering.',\n\tdefault: '',\n};\n\nconst retrieveFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [mongoNamespaceField, metadataFilterField],\n\t},\n];\n\nconst insertFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Clear Namespace',\n\t\t\t\tname: 'clearNamespace',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to clear documents in the namespace before inserting new data',\n\t\t\t},\n\t\t\tmongoNamespaceField,\n\t\t],\n\t},\n];\n\nlet mongoClient: MongoClient | null = null;\n\nasync function getMongoClient(context: any) {\n\tif (!mongoClient) {\n\t\tconst credentials = await context.getCredentials('mongoDb');\n\t\tmongoClient = new MongoClient(credentials.connectionString as string, {\n\t\t\tappName: 'devrel.integration.n8n_vector_integ',\n\t\t});\n\t\tawait mongoClient.connect();\n\t}\n\treturn mongoClient;\n}\n\nasync function mongoClientAndDatabase(context: any) {\n\tconst client = await getMongoClient(context);\n\tconst credentials = await context.getCredentials('mongoDb');\n\tconst db = client.db(credentials.database as string);\n\treturn { client, db };\n}\n\nasync function mongoCollectionSearch(this: ILoadOptionsFunctions) {\n\tconst { db } = await mongoClientAndDatabase(this);\n\ttry {\n\t\tconst collections = await db.listCollections().toArray();\n\t\tconst results = collections.map((collection) => ({\n\t\t\tname: collection.name,\n\t\t\tvalue: collection.name,\n\t\t}));\n\n\t\treturn { results };\n\t} catch (error) {\n\t\tthrow new NodeOperationError(this.getNode(), `Error: ${error.message}`);\n\t}\n}\nexport class VectorStoreMongoDBAtlas extends createVectorStoreNode({\n\tmeta: {\n\t\tdisplayName: 'MongoDB Atlas Vector Store',\n\t\tname: 'vectorStoreMongoDBAtlas',\n\t\tdescription: 'Work with your data in MongoDB Atlas Vector Store',\n\t\ticon: { light: 'file:mongodb.svg', dark: 'file:mongodb.dark.svg' },\n\t\tdocsUrl:\n\t\t\t'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoremongodbatlas/',\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'mongoDb',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\toperationModes: ['load', 'insert', 'retrieve', 'update', 'retrieve-as-tool'],\n\t},\n\tmethods: { listSearch: { mongoCollectionSearch } },\n\tretrieveFields,\n\tloadFields: retrieveFields,\n\tinsertFields,\n\tsharedFields,\n\tasync getVectorStoreClient(context, _filter, embeddings, itemIndex) {\n\t\ttry {\n\t\t\tconst { db } = await mongoClientAndDatabase(context);\n\t\t\ttry {\n\t\t\t\tconst collectionName = context.getNodeParameter('mongoCollection', itemIndex, '', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\n\t\t\t\tconst mongoVectorIndexName = context.getNodeParameter('vectorIndexName', itemIndex, '', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\n\t\t\t\tconst embeddingFieldName = context.getNodeParameter('embedding', itemIndex, '', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\n\t\t\t\tconst metadataFieldName = context.getNodeParameter('metadata_field', itemIndex, '', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\n\t\t\t\tconst collection = db.collection(collectionName);\n\n\t\t\t\t// test index exists\n\t\t\t\tconst indexes = await collection.listSearchIndexes().toArray();\n\n\t\t\t\tconst indexExists = indexes.some((index) => index.name === mongoVectorIndexName);\n\n\t\t\t\tif (!indexExists) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tcontext.getNode(),\n\t\t\t\t\t\t`Index ${mongoVectorIndexName} not found`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\tdescription: 'Please check that the index exists in your collection',\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn new MongoDBAtlasVectorSearch(embeddings, {\n\t\t\t\t\tcollection,\n\t\t\t\t\tindexName: mongoVectorIndexName, // Default index name\n\t\t\t\t\ttextKey: metadataFieldName, // Field containing raw text\n\t\t\t\t\tembeddingKey: embeddingFieldName, // Field containing embeddings\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tthrow new NodeOperationError(context.getNode(), `Error: ${error.message}`, {\n\t\t\t\t\titemIndex,\n\t\t\t\t\tdescription: 'Please check your MongoDB Atlas connection details',\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\t// Don't close the client here to maintain connection pooling\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow new NodeOperationError(context.getNode(), `Error: ${error.message}`, {\n\t\t\t\titemIndex,\n\t\t\t\tdescription: 'Please check your MongoDB Atlas connection details',\n\t\t\t});\n\t\t}\n\t},\n\tasync populateVectorStore(context, embeddings, documents, itemIndex) {\n\t\ttry {\n\t\t\tconst { db } = await mongoClientAndDatabase(context);\n\t\t\ttry {\n\t\t\t\tconst mongoCollectionName = context.getNodeParameter('mongoCollection', itemIndex, '', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\t\t\t\tconst embeddingFieldName = context.getNodeParameter('embedding', itemIndex, '', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\n\t\t\t\tconst metadataFieldName = context.getNodeParameter('metadata_field', itemIndex, '', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\n\t\t\t\tconst mongoDBAtlasVectorIndex = context.getNodeParameter('vectorIndexName', itemIndex, '', {\n\t\t\t\t\textractValue: true,\n\t\t\t\t}) as string;\n\n\t\t\t\t// Check if collection exists\n\t\t\t\tconst collections = await db.listCollections({ name: mongoCollectionName }).toArray();\n\t\t\t\tif (collections.length === 0) {\n\t\t\t\t\tawait db.createCollection(mongoCollectionName);\n\t\t\t\t}\n\t\t\t\tconst collection = db.collection(mongoCollectionName);\n\t\t\t\tawait MongoDBAtlasVectorSearch.fromDocuments(documents, embeddings, {\n\t\t\t\t\tcollection,\n\t\t\t\t\tindexName: mongoDBAtlasVectorIndex, // Default index name\n\t\t\t\t\ttextKey: metadataFieldName, // Field containing raw text\n\t\t\t\t\tembeddingKey: embeddingFieldName, // Field containing embeddings\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tthrow new NodeOperationError(context.getNode(), `Error: ${error.message}`, {\n\t\t\t\t\titemIndex,\n\t\t\t\t\tdescription: 'Please check your MongoDB Atlas connection details',\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\t// Don't close the client here to maintain connection pooling\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow new NodeOperationError(context.getNode(), `Error: ${error.message}`, {\n\t\t\t\titemIndex,\n\t\t\t\tdescription: 'Please check your MongoDB Atlas connection details',\n\t\t\t});\n\t\t}\n\t},\n}) {}\n"],"mappings":"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","names":["import_mongodb"]}