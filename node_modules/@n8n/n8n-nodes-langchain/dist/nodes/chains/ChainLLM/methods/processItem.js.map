{"version":3,"sources":["../../../../../nodes/chains/ChainLLM/methods/processItem.ts"],"sourcesContent":["import type { BaseLanguageModel } from '@langchain/core/language_models/base';\nimport { type IExecuteFunctions, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { getPromptInputByType } from '@utils/helpers';\nimport { getOptionalOutputParser } from '@utils/output_parsers/N8nOutputParser';\n\nimport { executeChain } from './chainExecutor';\nimport { type MessageTemplate } from './types';\n\nexport const processItem = async (ctx: IExecuteFunctions, itemIndex: number) => {\n\tconst llm = (await ctx.getInputConnectionData(\n\t\tNodeConnectionTypes.AiLanguageModel,\n\t\t0,\n\t)) as BaseLanguageModel;\n\n\t// Get output parser if configured\n\tconst outputParser = await getOptionalOutputParser(ctx);\n\n\t// Get user prompt based on node version\n\tlet prompt: string;\n\n\tif (ctx.getNode().typeVersion <= 1.3) {\n\t\tprompt = ctx.getNodeParameter('prompt', itemIndex) as string;\n\t} else {\n\t\tprompt = getPromptInputByType({\n\t\t\tctx,\n\t\t\ti: itemIndex,\n\t\t\tinputKey: 'text',\n\t\t\tpromptTypeKey: 'promptType',\n\t\t});\n\t}\n\n\t// Validate prompt\n\tif (prompt === undefined) {\n\t\tthrow new NodeOperationError(ctx.getNode(), \"The 'prompt' parameter is empty.\");\n\t}\n\n\t// Get chat messages if configured\n\tconst messages = ctx.getNodeParameter(\n\t\t'messages.messageValues',\n\t\titemIndex,\n\t\t[],\n\t) as MessageTemplate[];\n\n\t// Execute the chain\n\treturn await executeChain({\n\t\tcontext: ctx,\n\t\titemIndex,\n\t\tquery: prompt,\n\t\tllm,\n\t\toutputParser,\n\t\tmessages,\n\t});\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAgF;AAEhF,qBAAqC;AACrC,6BAAwC;AAExC,2BAA6B;AAGtB,MAAM,cAAc,OAAO,KAAwB,cAAsB;AAC/E,QAAM,MAAO,MAAM,IAAI;AAAA,IACtB,wCAAoB;AAAA,IACpB;AAAA,EACD;AAGA,QAAM,eAAe,UAAM,gDAAwB,GAAG;AAGtD,MAAI;AAEJ,MAAI,IAAI,QAAQ,EAAE,eAAe,KAAK;AACrC,aAAS,IAAI,iBAAiB,UAAU,SAAS;AAAA,EAClD,OAAO;AACN,iBAAS,qCAAqB;AAAA,MAC7B;AAAA,MACA,GAAG;AAAA,MACH,UAAU;AAAA,MACV,eAAe;AAAA,IAChB,CAAC;AAAA,EACF;AAGA,MAAI,WAAW,QAAW;AACzB,UAAM,IAAI,uCAAmB,IAAI,QAAQ,GAAG,kCAAkC;AAAA,EAC/E;AAGA,QAAM,WAAW,IAAI;AAAA,IACpB;AAAA,IACA;AAAA,IACA,CAAC;AAAA,EACF;AAGA,SAAO,UAAM,mCAAa;AAAA,IACzB,SAAS;AAAA,IACT;AAAA,IACA,OAAO;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,EACD,CAAC;AACF;","names":[]}