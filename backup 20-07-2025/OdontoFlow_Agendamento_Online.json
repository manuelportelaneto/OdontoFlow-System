{
  "name": "OdontoFlow - Agendamento Online",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "agendamento-clinica",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        60,
        -240
      ],
      "id": "e8221364-ff07-438e-a006-b94b45fc796b",
      "name": "Webhook",
      "webhookId": "d1a23305-95fc-4864-827a-f460e80dba76"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "eff0c6f5-65c9-4072-b18e-6704ca971e71",
              "leftValue": false,
              "rightValue": "={{ $json.validacao.valido }}",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            },
            {
              "id": "7579fff5-220f-4a4f-bcb4-e455488e1d68",
              "leftValue": true,
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        480,
        -240
      ],
      "id": "a915090d-e521-42e4-a9b4-479a9eda6a6c",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "70b4e709-7e03-4c81-ac6b-83064f4687e2",
              "leftValue": false,
              "rightValue": "={{ $json.verificacao_disponibilidade.disponivel }}",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            },
            {
              "id": "1384ad9f-f809-469f-b211-19a061df3a33",
              "leftValue": true,
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        840,
        -380
      ],
      "id": "01c32eed-0510-4248-9918-ba13afd7929b",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "// Validação com DEBUG detalhado e novas funcionalidades\nconst dados = $input.first().json;\n\nconsole.log(\"=== DEBUG VALIDAÇÃO ===\");\nconsole.log(\"Dados recebidos:\", JSON.stringify(dados, null, 2));\n\n// Função para validar telefone brasileiro\nfunction validarTelefone(telefone) {\n  if (!telefone) return false;\n  const regex = /^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/;\n  console.log(\"Validando telefone:\", telefone, \"Resultado:\", regex.test(telefone));\n  return regex.test(telefone);\n}\n\n// Função para validar email\nfunction validarEmail(email) {\n  if (!email) return false;\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  console.log(\"Validando email:\", email, \"Resultado:\", regex.test(email));\n  return regex.test(email);\n}\n\n// Função para validar data (não pode ser no passado)\nfunction validarData(data) {\n  if (!data) return false;\n  const hoje = new Date();\n  hoje.setHours(0, 0, 0, 0); // Zerar horas para comparar só a data\n  const dataAgendamento = new Date(data);\n  console.log(\"Validando data:\", data, \"Hoje:\", hoje, \"Data agendamento:\", dataAgendamento);\n  const resultado = dataAgendamento >= hoje;\n  console.log(\"Data válida:\", resultado);\n  return resultado;\n}\n\n// Função para gerar IP cliente (simplificada)\nfunction gerarIpCliente(nome, idConvenio) {\n  try {\n    const nomeProcessado = (nome || '').toString().trim();\n    const idProcessado = (idConvenio || '').toString().trim();\n    const ipCliente = (nomeProcessado + idProcessado).replace(/[^a-zA-Z0-9]/g, '').toUpperCase();\n    console.log(\"IP Cliente gerado:\", ipCliente);\n    return ipCliente || 'CLIENTE-SEM-ID';\n  } catch (error) {\n    console.log(\"Erro ao gerar IP Cliente:\", error.message);\n    return 'ERRO-GERAR-IP';\n  }\n}\n\n// Função para gerar ID do agendamento (simplificada)\nfunction gerarIdAgendamento(data, hora) {\n  try {\n    const agora = new Date().getTime();\n    const dataLimpa = (data || '').replace(/\\D/g, '');\n    const horaLimpa = (hora || '').replace(/\\D/g, '');\n    const id = `AGD-${dataLimpa}-${horaLimpa}-${agora}`;\n    console.log(\"ID Agendamento gerado:\", id);\n    return id;\n  } catch (error) {\n    console.log(\"Erro ao gerar ID Agendamento:\", error.message);\n    return `AGD-${new Date().getTime()}`;\n  }\n}\n\n// Validações detalhadas\nconst erros = [];\n\nconsole.log(\"=== INICIANDO VALIDAÇÕES ===\");\n\n// Validação do nome\nconsole.log(\"1. Validando nome:\", dados.nome_paciente);\nif (!dados.nome_paciente || dados.nome_paciente.length < 2) {\n  erros.push(\"Nome do paciente é obrigatório (mínimo 2 caracteres)\");\n  console.log(\"❌ Nome inválido\");\n} else {\n  console.log(\"✅ Nome válido\");\n}\n\n// Validação do telefone\nconsole.log(\"2. Validando telefone:\", dados.telefone);\nif (!validarTelefone(dados.telefone)) {\n  erros.push(\"Telefone deve estar no formato (11) 99999-9999\");\n  console.log(\"❌ Telefone inválido\");\n} else {\n  console.log(\"✅ Telefone válido\");\n}\n\n// Validação do email\nconsole.log(\"3. Validando email:\", dados.email);\nif (!validarEmail(dados.email)) {\n  erros.push(\"Email inválido\");\n  console.log(\"❌ Email inválido\");\n} else {\n  console.log(\"✅ Email válido\");\n}\n\n// Validação da data\nconsole.log(\"4. Validando data:\", dados.data_agendamento);\nif (!validarData(dados.data_agendamento)) {\n  erros.push(\"Data do agendamento não pode ser no passado\");\n  console.log(\"❌ Data inválida\");\n} else {\n  console.log(\"✅ Data válida\");\n}\n\n// Validação do dentista\nconsole.log(\"5. Validando dentista:\", dados.dentista);\nif (!dados.dentista) {\n  erros.push(\"Dentista é obrigatório\");\n  console.log(\"❌ Dentista inválido\");\n} else {\n  console.log(\"✅ Dentista válido\");\n}\n\n// Validação do convênio\nconsole.log(\"6. Validando convênio:\", dados.convenio);\nif (dados.convenio && dados.convenio !== 'Particular' && !dados.id_convenio) {\n  erros.push(\"ID do convênio é obrigatório para convênios não particulares\");\n  console.log(\"❌ ID Convênio inválido\");\n} else {\n  console.log(\"✅ Convênio válido\");\n}\n\nconsole.log(\"=== RESULTADO FINAL ===\");\nconsole.log(\"Total de erros:\", erros.length);\nconsole.log(\"Erros encontrados:\", erros);\nconsole.log(\"Validação passou:\", erros.length === 0);\n\n// Gerando dados processados com tratamento de erros\nconst dadosProcessados = {\n  nome_paciente: dados.nome_paciente ? dados.nome_paciente.trim().toUpperCase() : '',\n  telefone: dados.telefone || '',\n  email: dados.email ? dados.email.toLowerCase() : '',\n  data_agendamento: dados.data_agendamento || '',\n  horario: dados.horario || '',\n  dentista: dados.dentista || '',\n  procedimento: dados.procedimento || \"Consulta\",\n  convenio: dados.convenio || 'Particular',\n  id_convenio: (dados.convenio === 'Particular' ? 'N/A' : dados.id_convenio) || '',\n  observacoes: dados.observacoes || \"\",\n  data_criacao: new Date().toISOString(),\n  status: \"PENDENTE\",\n  ip_cliente: gerarIpCliente(dados.nome_paciente, dados.id_convenio),\n  id_agendamento: gerarIdAgendamento(dados.data_agendamento, dados.horario)\n};\n\n// Resultado da validação\nconst resultado = {\n  dados_originais: dados,\n  dados_validados: dadosProcessados,\n  validacao: {\n    valido: erros.length === 0,\n    erros: erros,\n    total_erros: erros.length\n  },\n  debug: {\n    dados_recebidos: dados,\n    timestamp: new Date().toISOString()\n  }\n};\n\nconsole.log(\"=== RETORNANDO ===\");\nconsole.log(\"Resultado final:\", JSON.stringify(resultado, null, 2));\n\nreturn [{ json: resultado }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        -240
      ],
      "id": "2be552bd-1bd3-4a9d-8628-31443266ea4a",
      "name": "Code validação"
    },
    {
      "parameters": {
        "jsCode": "// Verificação de disponibilidade com DEBUG detalhado\nconst inputData = $input.first().json;\nconst dados = inputData.dados_validados;\n\nconsole.log(\"=== DEBUG DISPONIBILIDADE ===\");\nconsole.log(\"Dados de entrada completos:\", JSON.stringify(inputData, null, 2));\nconsole.log(\"Dados validados:\", JSON.stringify(dados, null, 2));\n\n// Verificar se temos os dados necessários\nif (!dados) {\n  console.log(\"❌ ERRO: dados_validados não encontrados!\");\n  return [{\n    json: {\n      ...inputData,\n      verificacao_disponibilidade: {\n        disponivel: false,\n        motivo: \"Erro: dados não encontrados\",\n        debug: \"dados_validados está undefined\"\n      }\n    }\n  }];\n}\n\nconst dataHora = `${dados.data_agendamento} ${dados.horario}`;\nconsole.log(\"Data/Hora para verificar:\", dataHora);\n\n// Horários já ocupados (simulação - em produção consultaria banco de dados)\nconst horariosOcupados = [\n  \"2024-12-20 09:00\",\n  \"2024-12-20 14:00\", // Este está ocupado para teste\n  \"2024-12-21 10:00\"\n];\n\nconsole.log(\"Horários ocupados:\", horariosOcupados);\n\n// Horários de funcionamento da clínica\nconst horarioFuncionamento = {\n  inicio: \"08:00\",\n  fim: \"18:00\",\n  almoco_inicio: \"12:00\",\n  almoco_fim: \"13:00\"\n};\n\nconsole.log(\"Horário de funcionamento:\", horarioFuncionamento);\n\n// Verificações detalhadas\nconsole.log(\"=== VERIFICAÇÕES ===\");\n\n// 1. Verificar se horário está ocupado\nconst horarioOcupado = horariosOcupados.includes(dataHora);\nconsole.log(\"1. Horário ocupado?\", horarioOcupado, \"| Buscando:\", dataHora);\n\n// 2. Verificar se está dentro do horário de funcionamento\nconst horario = dados.horario;\nconsole.log(\"2. Horário do agendamento:\", horario);\n\nconst dentroHorario = horario >= horarioFuncionamento.inicio && \n                     horario <= horarioFuncionamento.fim;\nconsole.log(\"3. Dentro do horário de funcionamento?\", dentroHorario);\nconsole.log(\"   Comparação:\", horario, \">=\", horarioFuncionamento.inicio, \"&&\", horario, \"<=\", horarioFuncionamento.fim);\n\n// 3. Verificar se não é horário de almoço\nconst naoEAlmoco = !(horario >= horarioFuncionamento.almoco_inicio && \n                    horario < horarioFuncionamento.almoco_fim);\nconsole.log(\"4. Não é horário de almoço?\", naoEAlmoco);\nconsole.log(\"   Comparação almoço:\", horario, \">=\", horarioFuncionamento.almoco_inicio, \"&&\", horario, \"<\", horarioFuncionamento.almoco_fim);\n\n// Verificar dia da semana (segunda a sexta)\nconst dataAgendamento = new Date(dados.data_agendamento);\nconst diaSemana = dataAgendamento.getDay(); // 0=domingo, 1=segunda, etc.\nconst diaUtil = diaSemana >= 1 && diaSemana <= 5;\nconsole.log(\"5. Data:\", dados.data_agendamento, \"| Dia da semana:\", diaSemana, \"| É dia útil?\", diaUtil);\n\n// Resultado final\nconst disponivel = !horarioOcupado && dentroHorario && naoEAlmoco && diaUtil;\n\nconsole.log(\"=== RESULTADO FINAL ===\");\nconsole.log(\"Disponível:\", disponivel);\nconsole.log(\"Motivos:\");\nconsole.log(\"  - Não ocupado:\", !horarioOcupado);\nconsole.log(\"  - Dentro do horário:\", dentroHorario);\nconsole.log(\"  - Não é almoço:\", naoEAlmoco);\nconsole.log(\"  - É dia útil:\", diaUtil);\n\n// Determinar motivo se não disponível\nlet motivo = \"Disponível\";\nif (!disponivel) {\n  if (horarioOcupado) {\n    motivo = \"Horário já ocupado\";\n  } else if (!dentroHorario) {\n    motivo = \"Fora do horário de funcionamento (08:00-18:00)\";\n  } else if (!naoEAlmoco) {\n    motivo = \"Horário de almoço (12:00-13:00)\";\n  } else if (!diaUtil) {\n    motivo = \"Não atendemos aos finais de semana\";\n  } else {\n    motivo = \"Indisponível por motivo desconhecido\";\n  }\n}\n\nconsole.log(\"Motivo:\", motivo);\n\nconst resultado = {\n  ...inputData,\n  verificacao_disponibilidade: {\n    disponivel: disponivel,\n    motivo: motivo,\n    data_verificacao: new Date().toISOString(),\n    debug: {\n      dataHora_consultada: dataHora,\n      horario_ocupado: horarioOcupado,\n      dentro_horario: dentroHorario,\n      nao_e_almoco: naoEAlmoco,\n      dia_util: diaUtil,\n      dia_semana: diaSemana,\n      horarios_ocupados: horariosOcupados,\n      funcionamento: horarioFuncionamento\n    }\n  }\n};\n\nconsole.log(\"=== RETORNANDO ===\");\nconsole.log(\"Resultado completo:\", JSON.stringify(resultado, null, 2));\n\nreturn [{ json: resultado }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        -380
      ],
      "id": "19e3c4a5-320e-44ef-802a-5c49de60db09",
      "name": "Code disponibilidade"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1hLeRmvHSWXUS9InLi_F0NYvQBVHyayxZM_Ll7Mm8E9A/edit?gid=607701394#gid=607701394",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Agendamentos",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1hLeRmvHSWXUS9InLi_F0NYvQBVHyayxZM_Ll7Mm8E9A/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Paciente": "={{ $json.dados_originais.body.nome_paciente }}",
            "Telefone": "={{ $json.dados_originais.body.telefone }}",
            "Email": "={{ $json.dados_originais.body.email }}",
            "Dentista": "={{ $json.dados_originais.body.dentista }}",
            "Procedimento": "={{ $json.dados_originais.body.procedimento }}",
            "Convênio": "={{ $json.dados_originais.body.convenio }}",
            "ID Convênio": "={{ $json.dados_originais.body.id_convenio }}",
            "Status": "={{ $json.dados_validados.status }}",
            "Observações": "={{ $json.debug.dados_recebidos.body.observacoes }}",
            "Data Criação": "={{ $json.dados_validados.data_criacao }}",
            "IP Cliente": "={{ $json.dados_validados.ip_cliente }}",
            "ID Agendamento": "={{ $json.dados_validados.id_agendamento }}",
            "Data": "={{ $json.dados_originais.body.data_agendamento }}",
            "Hora": "={{ $json.dados_originais.body.horario }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Data",
              "displayName": "Data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Hora",
              "displayName": "Hora",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Paciente",
              "displayName": "Paciente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Telefone",
              "displayName": "Telefone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Dentista",
              "displayName": "Dentista",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Procedimento",
              "displayName": "Procedimento",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Convênio",
              "displayName": "Convênio",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ID Convênio",
              "displayName": "ID Convênio",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Observações",
              "displayName": "Observações",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Data Criação",
              "displayName": "Data Criação",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "IP Cliente",
              "displayName": "IP Cliente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ID Agendamento",
              "displayName": "ID Agendamento",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1020,
        -480
      ],
      "id": "0d264dbf-aea9-4f5c-a857-3ecd367e9595",
      "name": "Google Sheets - Agendamentos",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LDQgaDGxcuGGtKO0",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "d2cf04cb8237a7f7c17b6eabc6a8710031dd12ee9ad4bc62cd6b635a6a514920@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Clínica (teste)"
        },
        "start": "={{ $json.horaInicioFormatada }}",
        "end": "={{ $json.horaFimFormatada }}",
        "additionalFields": {
          "attendees": [
            "={{ $json.Email }}"
          ],
          "description": "=--- Detalhes do Paciente ---\nNome: {{ $json.Paciente }}\nTelefone: {{ $json.Telefone || 'Não informado' }}\nE-mail: {{ $json.Email || 'Não informado' }}\n\n--- Detalhes do Agendamento ---\nProcedimento: {{ $json.Procedimento || 'Não informado' }}\nDentista: {{ $json.Dentista || 'Não informado' }}\nConvênio: {{ $json.Convênio || 'Não informado' }}\nID do Convênio: {{ $json['ID do Convênio'] || 'Não informado' }}\n\n--- Observações ---\n{{ $json.Observações || 'Nenhuma' }}\n\n---------------------------------\nAgendado via sistema OdontoFlow.",
          "summary": "={{ $json.Paciente }} - {{ $json['ID Agendamento'] }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        1460,
        -480
      ],
      "id": "1c6036e7-0f43-4c6e-9616-12c0e4b799de",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "PDf0WplvBrdHjRCL",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e906ef2c-2020-4d54-8e38-0be12562b0e2"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1920,
        -480
      ],
      "id": "1a3821c2-ce67-48a7-8f3d-b0a8be3f1978",
      "name": "Switch"
    },
    {
      "parameters": {
        "fromEmail": "manuelportela@cloudmatrix.com.br",
        "toEmail": "={{ $('Google Sheets - Agendamentos').item.json.Email }}",
        "subject": "Confirmação de Agendamento - Clínica OdontoFlow",
        "html": "=<h3>Olá, {{ $('Code').item.json.Paciente }}!</h3>\n<p>Sua consulta foi agendada com sucesso.</p>\n<p><strong>Detalhes da Consulta:</strong></p>\n<ul>\n  <li><strong>Procedimento:</strong> {{ $('Code').item.json.Procedimento }}</li>\n  <li><strong>Data:</strong> {{ $('Google Sheets - Agendamentos').item.json.Data.split('-').reverse().join('/') }}</li>\n  <li><strong>Hora:</strong> {{ $('Code').item.json.Hora }}</li>\n  <li><strong>Com o(a) Dr(a).:</strong> {{ $('Code').item.json.Dentista }}</li>\n</ul>\n<p>Se precisar reagendar, por favor, entre em contato conosco.</p>\n<p>Atenciosamente,<br>Equipe OdontoFlow</p>",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        2140,
        -640
      ],
      "id": "b08bec2d-fd7f-4fa4-b2cb-e61fa14ef941",
      "name": "Send Email",
      "webhookId": "78c65318-aeb8-4cca-9b0c-f08f23a8fe82",
      "credentials": {
        "smtp": {
          "id": "2pC34Y85lrCuiCD1",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Pega o item que vem do Google Sheets\nconst item = $input.item;\n\n// Pega os dados granulados das colunas \"Data\" e \"Hora\"\nconst data = item.json.Data;\nconst hora = item.json.Hora;\n\n// Se \"Data\" ou \"Hora\" estiverem vazios na planilha, o fluxo para com um erro claro\nif (!data || !hora) {\n  throw new Error('As colunas \"Data\" e/ou \"Hora\" estão vazias na planilha.');\n}\n\n// Junta a data e a hora no formato ISO 8601 completo e inequívoco\nconst dataHoraCompleta = `${data}T${hora}:00`;\n\n// Cria o objeto de data de início\nconst dataInicio = new Date(dataHoraCompleta);\n\n// Cria a data de fim, adicionando 20 minutos\nconst dataFim = new Date(dataInicio);\ndataFim.setMinutes(dataFim.getMinutes() + 20);\n\n// Adiciona os novos campos formatados ao item para o próximo nó usar\nitem.json.horaInicioFormatada = dataInicio.toISOString();\nitem.json.horaFimFormatada = dataFim.toISOString();\n\n// Retorna o item modificado\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        -480
      ],
      "id": "563eab95-8f4c-4b57-b9a3-517de9eccb8a",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1hLeRmvHSWXUS9InLi_F0NYvQBVHyayxZM_Ll7Mm8E9A/edit?gid=607701394#gid=607701394",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Agendamentos",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1hLeRmvHSWXUS9InLi_F0NYvQBVHyayxZM_Ll7Mm8E9A/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ID Google": "={{ $json.id }}",
            "ID Agendamento": "={{ $('Google Sheets - Agendamentos').item.json['ID Agendamento'] }}"
          },
          "matchingColumns": [
            "ID Agendamento"
          ],
          "schema": [
            {
              "id": "Data",
              "displayName": "Data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Hora",
              "displayName": "Hora",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Paciente",
              "displayName": "Paciente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Telefone",
              "displayName": "Telefone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Dentista",
              "displayName": "Dentista",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Procedimento",
              "displayName": "Procedimento",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Convênio",
              "displayName": "Convênio",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ID Convênio",
              "displayName": "ID Convênio",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Observações",
              "displayName": "Observações",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Data Criação",
              "displayName": "Data Criação",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "IP Cliente",
              "displayName": "IP Cliente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ID Agendamento",
              "displayName": "ID Agendamento",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ID Google",
              "displayName": "ID Google",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1680,
        -480
      ],
      "id": "09b88287-5092-49d0-8446-735421148c93",
      "name": "Google Sheets - Agendamentos1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LDQgaDGxcuGGtKO0",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Fluxo Principal de Agendamentos \n** Recebe as respostas do formulário de agendamentos, cria uma reserva e notifica.**",
        "height": 800,
        "width": 2360,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        -760
      ],
      "typeVersion": 1,
      "id": "ce2bb456-bfe0-46dd-a218-a2b27d28fbe7",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Code validação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code disponibilidade",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Google Sheets - Agendamentos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code validação": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code disponibilidade": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets - Agendamentos": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "main": [
        [
          {
            "node": "Google Sheets - Agendamentos1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Google Calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        []
      ]
    },
    "Google Sheets - Agendamentos1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "26ceb0d0-e4e1-4709-8edd-3d15d134e717",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bff82b9e64593f3b34bda6888dda9d7a23beebc62df8b5f530d7bf5814ccca70"
  },
  "id": "Ma459pCe2jmwaY5d",
  "tags": [
    {
      "createdAt": "2025-06-20T01:57:40.100Z",
      "updatedAt": "2025-06-20T01:57:40.100Z",
      "id": "RwBSLdiNXti4j86L",
      "name": "Agendamento direto"
    }
  ]
}